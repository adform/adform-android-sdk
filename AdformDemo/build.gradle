buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.10.0'
        classpath 'com.newrelic.agent.android:agent-gradle-plugin:3.361.0'
    }
}
apply plugin: 'android'
apply plugin: 'newrelic'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.2'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 6
        versionName "0.3.3"
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        abortOnError false
    }
    signingConfigs {
        debug {
            project.ext.loadSign = false
        }
        release {
            project.ext.loadSign = true
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.release
        }
    }
    if ( project.ext.loadSign ) {
        Properties p = new Properties ()
        p.load ( new FileInputStream ( rootProject.file ( 'sign.properties' ) ) )

        android.signingConfigs.release.storeFile file ( p.storeFile )
        android.signingConfigs.release.storePassword p.storePassword
        android.signingConfigs.release.keyAlias p.keyAlias
        android.signingConfigs.release.keyPassword p.keyPassword
    }

}
tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    } else if (task.name.equals("lintVitalRelease")) {
        task.enabled = false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.newrelic.agent.android:android-agent:3.361.0'
    compile project(':AdformSdk2')
}
android.applicationVariants.all { variant ->
    variant.assemble.doLast {
        rename_and_moveout_apk(variant)
    }
}
def rename_and_moveout_apk(targetVariant) {
    // get hash of current commit
//    new ByteArrayOutputStream().withStream { os ->
//        def result = exec {
//            executable = 'git'
//            args = ['rev-parse', '--short', 'HEAD']
//            standardOutput = os
//        }
//
//        project.ext.gitHash = os.toString().trim();
//    }

    // replace output apk name to <product>-<version>-<buildtype>-<githash>.apk
    def versionSuffix = targetVariant.buildType.versionNameSuffix ? targetVariant.buildType.versionNameSuffix : ""
    def versionName = targetVariant.mergedFlavor.versionName + versionSuffix;

    if (targetVariant.zipAlign) {
        def originZipAlignedApkFile = targetVariant.outputFile;
        def renameZipAlignedApkFile = originZipAlignedApkFile.name.replace(targetVariant.buildType.name, versionName);
        copy {
            from "$originZipAlignedApkFile"
            into "$rootProject.projectDir/out"
            rename ("$originZipAlignedApkFile.name", "$renameZipAlignedApkFile")
        }
    }

    def originApkFile = targetVariant.packageApplication.outputFile;
    def renameApkFile = originApkFile.name.replace(targetVariant.buildType.name, versionName);
    copy {
        from "$originApkFile"
        into "$rootProject.projectDir/out"
        rename ("$originApkFile.name", "$renameApkFile")
    }
}

clean.doLast {
    project.delete "$rootProject.projectDir/out"
}
